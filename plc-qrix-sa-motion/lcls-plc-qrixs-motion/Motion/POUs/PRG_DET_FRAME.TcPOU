<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_DET_FRAME" Id="{ae792a1e-17b4-441d-8662-87ba0956d9c2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_DET_FRAME
VAR
	bInit: BOOL := TRUE;
	bError: BOOL := FALSE;
	bBusy: BOOL;
	bResetError: BOOL := FALSE;
	bEnableMotion : BOOL;
	bEnableMotion_M15 : BOOL;
	bEnableMotion_M16 : BOOL;
	bEnableMotion_M17 : BOOL;
	bEnableSetGaugeValue: BOOL;
	bEnableMoveRelative: BOOL;
	bEnableJackOff: BOOL;
	bEnableLevitation: BOOL;
	bEnableLanding: BOOL;
	bEnableAdjustingRoll: BOOL;
	bEnableAdjustingPitch: BOOL;
	bEnableAdjustingHeight: BOOL;
	
	bDone_M15, bDone_M16, bDone_M17: BOOL;
	
	tonWaitToStabilize: TON;

	tonSV2Open: TON;
	tonSV1Close: TON;
	
	tonDelayTrig: TON;
	
	iStepJackOff: INT := 1;
	iStepAdjustingRoll : INT := 1;
	iStepSetGaugeValue : INT := 1;
	iStepMoveRelative : INT := 1;
	iStepAdjustingPitch : INT := 1;
	iStepAdjustingHeight : INT := 1;
	
	trigDone: F_TRIG;
	
	fDistanceX: LREAL := 2.114; // in m
	fDistanceZ: LREAL := 2.142; // in m
	
	fbPower_AxisM15: MC_Power;
	fbPower_AxisM16: MC_Power;
	fbPower_AxisM17: MC_Power;
	
	fbSetPosition_M15: MC_SetPosition;
	fbSetPosition_M16: MC_SetPosition;
	fbSetPosition_M17: MC_SetPosition;

	fTargetPos_M15, fTargetPos_M16, fTargetPos_M17: LREAL;
	
    fbMoveRelative_M15: MC_MoveRelative;
    fbMoveRelative_M16: MC_MoveRelative;
    fbMoveRelative_M17: MC_MoveRelative;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInit THEN
	bInit := FALSE;

	
	GVL_Main.M15.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M15.bHardwareEnable := TRUE;
	GVL_Main.M15.bPowerSelf := TRUE;
	GVL_Main.M16.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M16.bHardwareEnable := TRUE;
	GVL_Main.M16.bPowerSelf := TRUE;
	GVL_Main.M17.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M17.bHardwareEnable := TRUE;
	GVL_Main.M17.bPowerSelf := TRUE;
	
	
	//
	GVL_Main.M15.nEnableMode := ENUM_StageEnableMode.DURING_MOTION ;
	GVL_Main.M16.nEnableMode := ENUM_StageEnableMode.DURING_MOTION ;
	GVL_Main.M17.nEnableMode := ENUM_StageEnableMode.DURING_MOTION ;
END_IF


// Read axis status
GVL_Main.M15.Axis.ReadStatus();
GVL_Main.M16.Axis.ReadStatus();
GVL_Main.M17.Axis.ReadStatus();

fbPower_AxisM15(
	Enable := GVL_Main.M15.bEnable,
	Enable_Positive := GVL_Main.M15.bLimitForwardEnable,
	Enable_Negative := GVL_Main.M15.bLimitBackwardEnable,
	Override := 100.000,
	Axis := GVL_Main.M15.Axis
);

fbPower_AxisM16(
	Enable := GVL_Main.M16.bEnable,
	Enable_Positive := GVL_Main.M16.bLimitForwardEnable,
	Enable_Negative := GVL_Main.M16.bLimitBackwardEnable,
	Override := 100.000,
	Axis := GVL_Main.M16.Axis
);

fbPower_AxisM17(
	Enable := GVL_Main.M17.bEnable,
	Enable_Positive := GVL_Main.M17.bLimitForwardEnable,
	Enable_Negative := GVL_Main.M17.bLimitBackwardEnable,
	Override := 100.000,
	Axis := GVL_Main.M17.Axis
);

GVL_Sensor.bFloating := GVL_Sensor.stPS1.fValue > 0.3 AND GVL_Sensor.stPS2.fValue > 0.18 AND GVL_Sensor.stPS3.fValue > 0.15;	

ACT_1_JACK_OFF();
ACT_2_Levitation();
ACT_3_Landing();
ACT_4_AdjustingRoll();
ACT_5_AdjustingPitch();
ACT_6_AdjustingHeight();
ACT_INIT();
ACT_SetGaugeValue();
ACT_MoveRelative();
ACT_ResetError();
]]></ST>
    </Implementation>
    <Action Name="ACT_1_JACK_OFF" Id="{09afe1fc-0e24-49bc-b799-7093c0737ca7}">
      <Implementation>
        <ST><![CDATA[CASE iStepJackOff OF
	1:
		IF bEnableJackOff AND NOT(bBusy AND bError) THEN
			// Step1 read and apply gauge value
			bEnableSetGaugeValue := TRUE;
			iStepJackOff := 2;
		ELSE
			bEnableJackOff := FALSE;
		END_IF;
	2: 
		// Step2 wait until done
		IF NOT bEnableSetGaugeValue THEN
			// read latest status
			GVL_Main.M15.Axis.ReadStatus();
			GVL_Main.M16.Axis.ReadStatus();
			GVL_Main.M17.Axis.ReadStatus();
			IF abs(GVL_Main.M15.Axis.NcToPlc.ActPos) < 0.1 AND abs(GVL_Main.M16.Axis.NcToPlc.ActPos) < 0.1 AND abs(GVL_Main.M17.Axis.NcToPlc.ActPos) < 0.1 THEN
				// We dont need to move any more....
				iStepJackOFF := 5;
			ELSIF max(GVL_Main.M15.Axis.NcToPlc.ActPos, GVL_Main.M16.Axis.NcToPlc.ActPos, GVL_Main.M17.Axis.NcToPlc.ActPos)
				- min(GVL_Main.M15.Axis.NcToPlc.ActPos, GVL_Main.M16.Axis.NcToPlc.ActPos, GVL_Main.M17.Axis.NcToPlc.ActPos) > 10.0 THEN
				// Some axis may be step-out...
				iStepJackOFF := -1;
			ELSE
				iStepJackOff := 3;
			END_IF;
		END_IF;
	3: 
		// Step3 calcurate motion distance		
		fTargetPos_M15 := -1 * GVL_Main.M15.Axis.NcToPlc.ActPos;
		fTargetPos_M16 := -1 * GVL_Main.M16.Axis.NcToPlc.ActPos;
		fTargetPos_M17 := -1 * GVL_Main.M17.Axis.NcToPlc.ActPos;
		
		// Enable Relative Motion Act
		bEnableMoveRelative := TRUE;
		
		iStepJackOff := 4;
	4: 
		// Wait until Done.
		IF NOT bEnableMoveRelative THEN
			// read and apply gauge value
			bEnableSetGaugeValue := TRUE;
			iStepJackOff := 2;
		END_IF;
	5:
		// End
		bEnableJackOff:= FALSE;
		bBusy := FALSE;
		iStepJackOff:=1;
	-1:
		// Error
		bError:= TRUE;
		bEnableJackOff:= FALSE;
		bBusy := FALSE;
		iStepJackOff:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_2_Levitation" Id="{1a03c01c-79f3-40e9-8f85-fa3729e0ff5d}">
      <Implementation>
        <ST><![CDATA[
IF bEnableLevitation THEN
	IF GVL_Sensor.stPS1.fValue > 0.15 AND GVL_Sensor.stPS2.fValue > 0.15 THEN
		GVL_Main.bOpenSV1 := TRUE;
	END_IF;
END_IF;


// SV2 will open after 3 secounds from SV1 opened...
tonSV2Open(
	IN := bEnableLevitation AND GVL_Main.bOpenSV1,
	PT := T#3s
);

IF tonSV2Open.Q THEN
	GVL_Main.bOpenSV2 := TRUE;
	bEnableLevitation := FALSE;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_3_Landing" Id="{3bd8bb9a-fa83-47b4-b111-8c64a2c33f1d}">
      <Implementation>
        <ST><![CDATA[

IF bEnableLanding AND NOT (bBusy OR bError) THEN
	GVL_Main.bOpenSV2 := FALSE;
	bBusy:= TRUE;
END_IF;

tonSV1Close(
	IN := bEnableLanding AND NOT GVL_Main.bOpenSV2,
	PT := T#3s
);

IF tonSV1Close.Q THEN
	GVL_Main.bOpenSV1 := FALSE;
	bEnableLanding := FALSE;
	bBusy:= FALSE;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_4_AdjustingRoll" Id="{f84b9517-e50c-4b86-bce7-a61f7bf2814f}">
      <Implementation>
        <ST><![CDATA[CASE iStepAdjustingRoll OF
	1:
		IF bEnableAdjustingRoll AND NOT(bBusy AND bError) THEN
			// Step1 read and apply gauge value
			bEnableSetGaugeValue := TRUE;
			iStepAdjustingRoll := 2;
		ELSE
			bEnableAdjustingRoll := FALSE;
		END_IF;
	2: 
		// Step2 wait until done
		IF NOT bEnableSetGaugeValue THEN
			iStepAdjustingRoll := 3;
		END_IF;
	3: 
		// Step3 calcurate motion distance
		// read latest status
		GVL_Main.M15.Axis.ReadStatus();
		GVL_Main.M16.Axis.ReadStatus();
		GVL_Main.M17.Axis.ReadStatus();
				
		IF GVL_Sensor.stFrameR.fValue > 0 THEN
			// Need to up YDF1
			fTargetPos_M15 := abs(REAL_TO_LREAL(GVL_Sensor.stFrameR.fValue)) * fDistanceX / 2 * 0.9;
			fTargetPos_M16 := 0;
			fTargetPos_M17 := 0;
			// Enable Relative Motion Act
			bEnableMoveRelative := TRUE;
			iStepAdjustingRoll := 4;
		ELSE
			// Need to up YDF2
			fTargetPos_M15 := 0;
			fTargetPos_M16 := abs(REAL_TO_LREAL(GVL_Sensor.stFrameR.fValue)) * fDistanceX / 2 * 0.9;
			fTargetPos_M17 := 0;
			// Enable Relative Motion Act
			bEnableMoveRelative := TRUE;
			iStepAdjustingRoll := 4;
		END_IF;
	4: 
		// Wait until Done. and wait tilt sensor stabilization.
		tonWaitToStabilize(IN:=NOT bEnableMoveRelative, PT:=T#5s);
		IF tonWaitToStabilize.Q THEN
			iStepAdjustingRoll := 5;
			tonWaitToStabilize(IN:=FALSE);
		END_IF;
	5:
		IF abs(GVL_Sensor.stFrameR.fValue) > 0.05 THEN
			// Iterartion
			bEnableSetGaugeValue := TRUE;
			iStepAdjustingRoll := 2;
		ELSE
			// End
			bEnableAdjustingRoll:= FALSE;
			iStepAdjustingRoll:=1;
		END_IF;
	-1:
		// Error
		bError:= TRUE;
		bEnableAdjustingRoll:= FALSE;
		iStepAdjustingRoll:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_5_AdjustingPitch" Id="{96ae706d-13dc-4d26-978b-353a0e965687}">
      <Implementation>
        <ST><![CDATA[CASE iStepAdjustingPitch OF
	1:
		IF bEnableAdjustingPitch AND NOT(bBusy AND bError) THEN
			// Step1 read and apply gauge value
			bEnableSetGaugeValue := TRUE;
			iStepAdjustingPitch := 2;
		ELSE
			bEnableAdjustingPitch := FALSE;
		END_IF;
	2: 
		// Step2 wait until done
		IF NOT bEnableSetGaugeValue THEN
			iStepAdjustingPitch := 3;
		END_IF;
	3: 
		// Step3 calcurate motion distance
		// read latest status
		GVL_Main.M15.Axis.ReadStatus();
		GVL_Main.M16.Axis.ReadStatus();
		GVL_Main.M17.Axis.ReadStatus();
				
		IF GVL_Sensor.stFrameP.fValue > 0 THEN
			// Need to up YDF1 AND 2
			fTargetPos_M15 := abs(REAL_TO_LREAL(GVL_Sensor.stFrameP.fValue)) * fDistanceZ / 2 * 0.9;
			fTargetPos_M16 := abs(REAL_TO_LREAL(GVL_Sensor.stFrameP.fValue)) * fDistanceZ / 2 * 0.9;;
			fTargetPos_M17 := 0;
			// Enable Relative Motion Act
			bEnableMoveRelative := TRUE;
			iStepAdjustingPitch := 4;
		ELSE
			// Need to up YDF3
			fTargetPos_M15 := 0;
			fTargetPos_M16 := 0;
			fTargetPos_M17 := abs(REAL_TO_LREAL(GVL_Sensor.stFrameP.fValue)) * fDistanceZ / 2 * 0.9;
			// Enable Relative Motion Act
			bEnableMoveRelative := TRUE;
			iStepAdjustingPitch := 4;
		END_IF;
	4: 
		// Wait until Done. and wait tilt sensor stabilization.
		tonWaitToStabilize(IN:=NOT bEnableMoveRelative, PT:=T#5s);
		IF tonWaitToStabilize.Q THEN
			iStepAdjustingPitch := 5;
		END_IF;
	5:
		IF abs(GVL_Sensor.stFrameP.fValue) > 0.05 THEN
			// Iteration
			bEnableSetGaugeValue := TRUE;
			iStepAdjustingPitch := 2;
		ELSE
			// End
			bEnableAdjustingPitch:= FALSE;
			iStepAdjustingPitch:=1;
		END_IF;
	-1:
		// Error
		bError:= TRUE;
		bEnableAdjustingPitch:= FALSE;
		iStepAdjustingPitch:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_6_AdjustingHeight" Id="{ecff2fe2-4916-403e-be1d-379dbc38b465}">
      <Implementation>
        <ST><![CDATA[CASE iStepAdjustingHeight OF
	1:
		IF bEnableAdjustingHeight AND NOT(bBusy AND bError) THEN
			// Step1 read and apply gauge value
			bEnableSetGaugeValue := TRUE;
			iStepAdjustingHeight := 2;
		ELSE
			bEnableAdjustingHeight := FALSE;
		END_IF;
	2: 
		// Step2 wait until done
		IF NOT bEnableSetGaugeValue THEN
			iStepAdjustingHeight := 3;
		END_IF;
	3: 
		// Step3 calcurate motion distance
		// read latest status
		GVL_Main.M15.Axis.ReadStatus();
		GVL_Main.M16.Axis.ReadStatus();
		GVL_Main.M17.Axis.ReadStatus();

		// Need to move YDF 1~3
		fTargetPos_M15 := -1 * REAL_TO_LREAL(GVL_Sensor.stHDF.fValue) * 0.9;
		fTargetPos_M16 := -1 * REAL_TO_LREAL(GVL_Sensor.stHDF.fValue) * 0.9;
		fTargetPos_M17 := -1 * REAL_TO_LREAL(GVL_Sensor.stHDF.fValue) * 0.9;
		// Enable Relative Motion Act
		bEnableMoveRelative := TRUE;
		iStepAdjustingHeight := 4;

	4: 
		// Wait until Done. and wait tilt sensor stabilization.
		tonWaitToStabilize(IN:=NOT bEnableMoveRelative, PT:=T#5s);
		IF tonWaitToStabilize.Q THEN
			iStepAdjustingHeight := 5;
		END_IF;
	5:
		// check pitch and roll (if some axis is step-out)
		IF abs(GVL_Sensor.stFrameP.fValue) > 0.5 OR abs(GVL_Sensor.stFrameR.fValue) > 0.5 THEN
			bError := TRUE;
		END_IF;		
		
		IF abs(GVL_Sensor.stHDF.fValue) > 0.05 AND NOT bError THEN
			// Iteration
			bEnableAdjustingHeight := FALSE;
			iStepAdjustingHeight := 2;
		ELSE
			// End
			bEnableAdjustingHeight:= FALSE;
			iStepAdjustingHeight:=1;
		END_IF;
	-1:
		// Error
		bError:= TRUE;
		bEnableAdjustingHeight:= FALSE;
		iStepAdjustingHeight:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_INIT" Id="{a7e3d801-6d68-4b0b-889c-1ba1f5c3c9e2}">
      <Implementation>
        <ST><![CDATA[IF bINIT THEN
	bINIT := FALSE;
	
	GVL_Main.M15.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M15.bHardwareEnable := TRUE;
	GVL_Main.M15.bPowerSelf := TRUE;
	GVL_Main.M16.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M16.bHardwareEnable := TRUE;
	GVL_Main.M16.bPowerSelf := TRUE;
	GVL_Main.M17.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
	GVL_Main.M17.bHardwareEnable := TRUE;
	GVL_Main.M17.bPowerSelf := TRUE;
	
	// Read linear gauge value
	bEnableSetGaugeValue := TRUE;

END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_MoveRelative" Id="{d0a5870f-543e-4e78-9fac-0018c88574b5}">
      <Implementation>
        <ST><![CDATA[CASE iStepMoveRelative OF
	1: 
		IF bEnableMoveRelative AND NOT (bBusy OR bError) THEN
			bBusy:= TRUE;
			bEnableMotion := TRUE;
			bDone_M15 := bDone_M16 := bDone_M17 := FALSE;
			iStepMoveRelative:= 2;
		ELSE
			bEnableMoveRelative:= FALSE;
		END_IF;
	2:
		// Step2 Execute motion
		IF fbMoveRelative_M15.Error OR fbMoveRelative_M16.Error OR fbMoveRelative_M17.Error THEN
			iStepMoveRelative:= -1;
			bError := 1;
		END_IF;
		
		IF (bDone_M15 AND bDone_M16 AND bDone_M17) AND NOT(fbMoveRelative_M15.Execute OR fbMoveRelative_M16.Execute OR fbMoveRelative_M17.Execute) THEN
			iStepMoveRelative:= 3;
		END_IF;
		
		IF fbMoveRelative_M15.Done THEN
			bDone_M15 := TRUE;
		END_IF;
		IF fbMoveRelative_M16.Done THEN
			bDone_M16 := TRUE;
		END_IF;
		IF fbMoveRelative_M17.Done THEN
			bDone_M17 := TRUE;
		END_IF;
		
		fbMoveRelative_M15(	Axis		:= GVL_Main.M15.Axis,
							Execute		:= bEnableMotion AND NOT (bDone_M15 OR bError),
							Distance	:= fTargetPos_M15,
							Velocity	:= 0.05,
							Acceleration:= 0.8,
							Deceleration:= 0.8,
							Jerk		:= 32
		);
		fbMoveRelative_M16(	Axis		:= GVL_Main.M16.Axis,
							Execute		:= bEnableMotion AND NOT (bDone_M16 OR bError),
							Distance	:= fTargetPos_M16,
							Velocity	:= 0.05,
							Acceleration:= 0.8,
							Deceleration:= 0.8,
							Jerk		:= 32
		);
		fbMoveRelative_M17(	Axis		:= GVL_Main.M17.Axis,
							Execute		:= bEnableMotion AND NOT (bDone_M17 OR bError),
							Distance	:= fTargetPos_M17,
							Velocity	:= 0.05,
							Acceleration:= 0.8,
							Deceleration:= 0.8,
							Jerk		:= 32
		);
	3:
		// End
		bEnableMotion:= FALSE;
		bEnableMoveRelative:= FALSE;
		bBusy := FALSE;
		iStepMoveRelative:=1;
	-1:
		// Error
		fbMoveRelative_M15.Execute:= FALSE;
		fbMoveRelative_M16.Execute:= FALSE;
		fbMoveRelative_M17.Execute:= FALSE;
		bError:= TRUE;
		bEnableMotion:= FALSE;
		bEnableMoveRelative:= FALSE;
		bBusy := FALSE;
		iStepMoveRelative:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ResetError" Id="{06590c9c-35f1-44d5-8e2b-6f518c77179c}">
      <Implementation>
        <ST><![CDATA[
IF bResetError THEN
	bResetError := FALSE;
	bError:= FALSE;
	bBusy:=FALSE;
	bEnableMotion := FALSE;
	bEnableMotion_M15 := FALSE;
	bEnableMotion_M16 := FALSE;
	bEnableMotion_M17 := FALSE;
	bEnableSetGaugeValue := FALSE;
	bEnableMoveRelative := FALSE;
	bEnableJackOff := FALSE;
	bEnableLevitation := FALSE;
	bEnableLanding := FALSE;
	bEnableAdjustingRoll := FALSE;
	bEnableAdjustingPitch := FALSE;
	bEnableAdjustingHeight := FALSE;
	
	bDone_M15 := bDone_M16 := bDone_M17 := FALSE;
	
	iStepJackOff := 1;
	iStepAdjustingRoll := 1;
	iStepSetGaugeValue := 1;
	iStepMoveRelative := 1;
	iStepAdjustingPitch := 1;
	iStepAdjustingHeight := 1;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SetGaugeValue" Id="{ee83972d-b817-4ea9-8e0b-2d34f416c583}">
      <Implementation>
        <ST><![CDATA[
CASE iStepSetGaugeValue OF
	1:
		IF bEnableSetGaugeValue AND NOT (bBusy OR bError) THEN
			fTargetPos_M15 := GVL_Sensor.stYDF1.fValue;
			fTargetPos_M16 := GVL_Sensor.stYDF2.fValue;
			fTargetPos_M17 := GVL_Sensor.stYDF3.fValue;
			
			iStepSetGaugeValue:=2;
		ELSE
			bEnableSetGaugeValue := FALSE;
		END_IF;		
	2:		
		fbSetPosition_M15(	Axis :=		GVL_Main.M15.Axis,
							Execute :=	NOT fbSetPosition_M15.Done,
							Position :=	fTargetPos_M15
		);
		
		fbSetPosition_M16(	Axis :=		GVL_Main.M16.Axis,
							Execute :=	NOT fbSetPosition_M16.Done,
							Position :=	fTargetPos_M16
		);
		
		fbSetPosition_M17(	Axis :=		GVL_Main.M17.Axis,
							Execute :=	NOT fbSetPosition_M17.Done,
							Position :=	fTargetPos_M17
		);
		IF fbSetPosition_M15.Done OR fbSetPosition_M15.Error THEN
			fbSetPosition_M15(	Axis :=		GVL_Main.M15.Axis,
								Execute :=	FALSE
			);
		END_IF;
		IF fbSetPosition_M16.Done OR fbSetPosition_M16.Error THEN	
			fbSetPosition_M16(	Axis :=		GVL_Main.M16.Axis,
								Execute :=	FALSE
			);
		END_IF;
		IF fbSetPosition_M17.Done OR fbSetPosition_M17.Error THEN
			fbSetPosition_M17(	Axis :=		GVL_Main.M17.Axis,
								Execute :=	FALSE
			);
		END_IF;
		
		IF NOT(fbSetPosition_M15.Execute OR fbSetPosition_M16.Execute OR fbSetPosition_M17.Execute) THEN
			iStepSetGaugeValue:=3;
		END_IF;
		
	3:		
		bEnableSetGaugeValue := FALSE;
		iStepSetGaugeValue:=1;
END_CASE;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>